{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pixelSize","height","width","gap","magX","magY","mag","r","g","b","a","drawing","ctx","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","rect","getBoundingClientRect","_window","innerWidth","innerHeight","setState","Math","min","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawDots","nextFrame","_this3","_this$state","clearRect","Date","getTime","value","r1","r2","x","y","dx","x1","y1","x2","y2","sqrt","_this$state2","_this$state2$gap","_this$state3","headGap","mx","my","row","rows","base","sin","cos","beginPath","fillStyle","concat","fillRect","_this4","_this$state4","_this$state5","react_default","createElement","className","ref","htmlFor","name","onChange","e","target","parseInt","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51bc08db.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const gap = 50;\n        const mag = gap * .75;\n\n        this.state = {\n            pixelSize: 1.5,\n            height: 500,\n            width: 150,\n            gap: gap,\n            magX: mag,\n            magY: mag * .75,\n            r: 255,\n            g: 255,\n            b: 255,\n            a: 1\n        };\n\n        this.drawing = false;\n        this.ctx = null;\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.startts = this.getTS();\n    }\n\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const rect = this.canvas.getBoundingClientRect();\n        const {innerWidth, innerHeight} = window;\n        const {width, height} = rect;\n\n        this.setState({width: Math.min(width, innerWidth), height: Math.min(height, innerHeight)});\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n        this.ts = this.getTS();\n        this.clearFrame();\n\n        this.drawDots();\n\n        this.nextFrame();\n    }\n\n    nextFrame() {\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n        const {width, height} = this.state;\n        const {ctx} = this;\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    getTS() {\n        const date = new Date();\n\n        return date.getTime();\n    }\n\n    convertRange(value, r1, r2) {\n        return (value - r1[0]) * (r2[1] - r2[0]) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    move(x, y, dx, x1, y1, x2, y2) {\n        const a = {x: x2 - x1, y: y2 - y1};\n        let mag = Math.sqrt(a.x * a.x + a.y * a.y);\n\n        if (mag === 0) {\n            a.x = a.y = 0;\n        } else {\n            a.x = a.x / mag * dx;\n            a.y = a.y / mag * dx;\n        }\n\n        return {x: x + a.x, y: y + a.y};\n    }\n\n    distance(x1, y1, x2, y2) {\n        const x = x1 - x2;\n        const y = y1 - y2;\n\n        return Math.sqrt(x * x + y * y);\n    };\n\n    drawDots() {\n        const {width, height, pixelSize, gap = 50, magX, magY} = this.state;\n        const {r, g, b, a} = this.state;\n        const {ctx} = this;\n\n        const headGap = height / 2;\n\n        const ts = this.getTS() / 500;\n        let mx = magX;\n        let my = magY;\n        let row = 0;\n        const rows = (height - headGap) / gap;\n\n        for (let y = headGap; y < height; y += gap) {\n            row++;\n            let base = ts;\n            for (let x = 0; x < width; x += gap) {\n                base += 1;\n                mx = magX - ((magX / rows) * row);\n                my = magY - ((magY / rows) * row);\n\n                const sin = Math.sin(base);\n                const cos = Math.cos(base);\n\n                ctx.beginPath();\n                ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n                ctx.fillRect(x + (sin * mx), y + (cos * my), pixelSize, pixelSize);\n            }\n        }\n    }\n\n    render() {\n        const {width, height, pixelSize, gap, magX, magY} = this.state;\n        const {r, g, b, a} = this.state;\n\n        return (\n            <div className={'grid'}>\n                <div className={'dots'}>\n                    <canvas ref=\"canvas\" width={width} height={height}/>\n                </div>\n                <div className={'controls'}>\n                    <h2>Controls</h2>\n                    <div>\n                        <label htmlFor={'size'}>Dot Size</label><br/>\n                        <input name={'size'} value={pixelSize}\n                               onChange={e => this.setState({pixelSize: e.target.value})}/>\n                    </div>\n                    <div>\n                        <label htmlFor={'gap'}>Gap Size</label><br/>\n                        <input name={'gap'} value={gap} onChange={e => this.setState({gap: parseInt(e.target.value)})}/>\n                    </div>\n                    <div>\n                        <label>Magnitude</label><br/>\n                        <div className={'row'}>\n                            <input className={'small'} name={'magX'} value={magX}\n                                   onChange={e => this.setState({magX: e.target.value})}/>\n                            <input className={'small'} name={'magY'} value={magY}\n                                   onChange={e => this.setState({magY: e.target.value})}/>\n                        </div>\n                    </div>\n                    <div>\n                        <label>Colour</label><br/>\n                        <div className={'row'}>\n                            <input className={'small'} value={r} onChange={e => this.setState({r: e.target.value})}/>\n                            <input className={'small'} value={g} onChange={e => this.setState({g: e.target.value})}/>\n                            <input className={'small'} value={b} onChange={e => this.setState({b: e.target.value})}/>\n                            <input className={'small'} value={a} onChange={e => this.setState({a: e.target.value})}/>\n                        </div>\n                    </div>\n\n                    <div>\n                        <label>Presets</label>\n                        <div>\n                            <button onClick={() => this.setState({\n                                pixelSize: gap * 2,\n                                magX: gap * .75,\n                                magY: gap * .5,\n                                r: 0,\n                                a: .8\n                            })}>Blue Sea\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}